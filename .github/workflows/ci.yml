name: CI
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:   # <— enables “Run workflow” button

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - run: python -m pip install -U pip
      - run: python -m pip install -e ".[test]"
      - run: pytest -q

      - name: Exercise CLI (csv2json)
        shell: bash
        run: | 
          # Fallback to module form if console script isn't on PATH
          if ! command -v csv2json >/dev/null 2>&1; then
            csv2json() { python -m csvtojson.cli "$@"; }
          fi

          # 1) Create a tiny CSV
          printf "name,age,active\nAlice,30,true\nBob,5,false\n" > sample.csv

          cat sample.csv

          # 2) Run CLI (prints output path)
          OUT=$(csv2json sample.csv)
          echo "CLI wrote: $OUT"
          test -f "$OUT"

          cat sample.json

          # 3) Validate JSON content
          python - <<'PY' "$OUT"
          import json, sys, pathlib
          p = pathlib.Path(sys.argv[1])
          data = json.loads(p.read_text(encoding="utf-8"))
          assert data == [
              {"name": "Alice", "age": 30, "active": True},
              {"name": "Bob", "age": 5, "active": False},
          ], data
          print("OK: CLI JSON content matches expected")
          PY

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov/
          if-no-files-found: ignore

      - name: Make coverage XML
        run: |
          test -f coverage.xml || coverage xml -o coverage.xml

      - name: Generate coverage summary (Markdown + badge)
        uses: irongut/CodeCoverageSummary@v1.3.0
        with:
          filename: coverage.xml
          badge: true
          format: markdown
          output: both           # writes to job summary + file
          thresholds: '60 80'    # <low, high> bands for colors

      - name: Also append the summary file
        if: always()
        run: cat code-coverage-results.md >> $GITHUB_STEP_SUMMARY
