name: CI
on:
  push:
    branches: [main]
  pull_request:
  workflow_dispatch:   # <— enables “Run workflow” button

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.11', '3.12']

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - run: python -m pip install -U pip
      - run: python -m pip install -e ".[test]"
      - run: pytest -q

      - name: Exercise CLI (csv2json)
        shell: bash
        run: | 
          # Fallback to module form if console script isn't on PATH
          if ! command -v csv2json >/dev/null 2>&1; then
            csv2json() { python -m csvtojson.cli "$@"; }
          fi

          # 1) Create a tiny CSV
          printf "name,age,active\nAlice,30,true\nBob,5,false\n" > sample.csv

          cat sample.csv

          # 2) Run CLI (prints output path)
          OUT=$(csv2json sample.csv)
          echo "CLI wrote: $OUT"
          test -f "$OUT"

          cat sample.json

          # 3) Validate JSON content
          python - <<'PY' "$OUT"
          import json, sys, pathlib
          p = pathlib.Path(sys.argv[1])
          data = json.loads(p.read_text(encoding="utf-8"))
          assert data == [
              {"name": "Alice", "age": 30, "active": True},
              {"name": "Bob", "age": 5, "active": False},
          ], data
          print("OK: CLI JSON content matches expected")
          PY

      - name: Upload coverage HTML
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: htmlcov-${{ matrix.python-version }}
          path: htmlcov/
          if-no-files-found: ignore

      - name: Make coverage XML
        run: |
          test -f coverage.xml || coverage xml -o coverage.xml

      - name: Publish coverage to job summary
        run: |
          python - <<'PY'
          import os, xml.etree.ElementTree as ET

          root = ET.parse("coverage.xml").getroot()   # Cobertura XML

          # Top-level metrics
          lr = float(root.attrib.get("line-rate") or 0.0)
          br = root.attrib.get("branch-rate")
          lv = int(float(root.attrib.get("lines-valid") or 0))
          lc = int(float(root.attrib.get("lines-covered") or 0))

          md = ["# Coverage Summary", f"**Line:** {lr*100:.2f}% ({lc}/{lv})"]
          if br is not None:
              md.append(f"**Branch:** {float(br)*100:.2f}%")

          # Per-file coverage (lowest 10)
          rows = []
          for cls in root.iter("class"):
              fn = cls.attrib.get("filename", "")
              total = 0
              covered = 0
              for ln in cls.iter("line"):
                  hits = int(ln.attrib.get("hits", "0"))  # <-- key fix
                  total += 1
                  if hits > 0:
                      covered += 1
              rate = 100.0 if total == 0 else covered / total * 100
              rows.append((rate, covered, total, fn))

          rows.sort(key=lambda x: x[0])
          table = [
              "\n## Lowest-covered files",
              "\n| File | Coverage | Covered/Valid |",
              "|---|---:|---:|",
          ]
          for rate, cov, tot, fn in rows[:10]:
              table.append(f"| `{fn}` | {rate:.1f}% | {cov}/{tot} |")

          out = "\n\n".join(md + ["\n".join(table)])
          with open(os.environ["GITHUB_STEP_SUMMARY"], "a", encoding="utf-8") as f:
              f.write(out + "\n")
          PY
